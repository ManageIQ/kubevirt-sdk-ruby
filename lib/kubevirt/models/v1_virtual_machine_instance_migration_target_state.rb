=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'date'
require 'time'

module Kubevirt
  class V1VirtualMachineInstanceMigrationTargetState
    # The UID of the target attachment pod for hotplug volumes
    attr_accessor :attachment_pod_uid

    # If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node
    attr_accessor :cpu_set

    # The list of ports opened for live migration on the destination node
    attr_accessor :direct_migration_node_ports

    # The Target Node has seen the Domain Start Event
    attr_accessor :domain_detected

    # The name of the domain on the source libvirt domain
    attr_accessor :domain_name

    # Namespace used in the name of the source libvirt domain. Can be used to find and modify paths in the domain
    attr_accessor :domain_namespace

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :domain_ready_timestamp

    # The Source VirtualMachineInstanceMigration object associated with this migration
    attr_accessor :migration_uid

    # The source node that the VMI originated on
    attr_accessor :node

    # The address of the target node to use for the migration
    attr_accessor :node_address

    # If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node
    attr_accessor :node_topology

    # If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here
    attr_accessor :persistent_state_pvc_name

    # The source pod that the VMI is originated on
    attr_accessor :pod

    # SELinuxContext is the actual SELinux context of the pod
    attr_accessor :selinux_context

    # The ip address/fqdn:port combination to use to synchronize the VMI with the target.
    attr_accessor :sync_address

    # VirtualMachineInstanceUID is the UID of the target virtual machine instance
    attr_accessor :virtual_machine_instance_uid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'attachment_pod_uid' => :'attachmentPodUID',
        :'cpu_set' => :'cpuSet',
        :'direct_migration_node_ports' => :'directMigrationNodePorts',
        :'domain_detected' => :'domainDetected',
        :'domain_name' => :'domainName',
        :'domain_namespace' => :'domainNamespace',
        :'domain_ready_timestamp' => :'domainReadyTimestamp',
        :'migration_uid' => :'migrationUID',
        :'node' => :'node',
        :'node_address' => :'nodeAddress',
        :'node_topology' => :'nodeTopology',
        :'persistent_state_pvc_name' => :'persistentStatePVCName',
        :'pod' => :'pod',
        :'selinux_context' => :'selinuxContext',
        :'sync_address' => :'syncAddress',
        :'virtual_machine_instance_uid' => :'virtualMachineInstanceUID'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'attachment_pod_uid' => :'String',
        :'cpu_set' => :'Array<Integer>',
        :'direct_migration_node_ports' => :'Hash<String, Integer>',
        :'domain_detected' => :'Boolean',
        :'domain_name' => :'String',
        :'domain_namespace' => :'String',
        :'domain_ready_timestamp' => :'Time',
        :'migration_uid' => :'String',
        :'node' => :'String',
        :'node_address' => :'String',
        :'node_topology' => :'String',
        :'persistent_state_pvc_name' => :'String',
        :'pod' => :'String',
        :'selinux_context' => :'String',
        :'sync_address' => :'String',
        :'virtual_machine_instance_uid' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1VirtualMachineInstanceMigrationTargetState` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1VirtualMachineInstanceMigrationTargetState`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'attachment_pod_uid')
        self.attachment_pod_uid = attributes[:'attachment_pod_uid']
      end

      if attributes.key?(:'cpu_set')
        if (value = attributes[:'cpu_set']).is_a?(Array)
          self.cpu_set = value
        end
      end

      if attributes.key?(:'direct_migration_node_ports')
        if (value = attributes[:'direct_migration_node_ports']).is_a?(Hash)
          self.direct_migration_node_ports = value
        end
      end

      if attributes.key?(:'domain_detected')
        self.domain_detected = attributes[:'domain_detected']
      end

      if attributes.key?(:'domain_name')
        self.domain_name = attributes[:'domain_name']
      end

      if attributes.key?(:'domain_namespace')
        self.domain_namespace = attributes[:'domain_namespace']
      end

      if attributes.key?(:'domain_ready_timestamp')
        self.domain_ready_timestamp = attributes[:'domain_ready_timestamp']
      end

      if attributes.key?(:'migration_uid')
        self.migration_uid = attributes[:'migration_uid']
      end

      if attributes.key?(:'node')
        self.node = attributes[:'node']
      end

      if attributes.key?(:'node_address')
        self.node_address = attributes[:'node_address']
      end

      if attributes.key?(:'node_topology')
        self.node_topology = attributes[:'node_topology']
      end

      if attributes.key?(:'persistent_state_pvc_name')
        self.persistent_state_pvc_name = attributes[:'persistent_state_pvc_name']
      end

      if attributes.key?(:'pod')
        self.pod = attributes[:'pod']
      end

      if attributes.key?(:'selinux_context')
        self.selinux_context = attributes[:'selinux_context']
      end

      if attributes.key?(:'sync_address')
        self.sync_address = attributes[:'sync_address']
      end

      if attributes.key?(:'virtual_machine_instance_uid')
        self.virtual_machine_instance_uid = attributes[:'virtual_machine_instance_uid']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attachment_pod_uid == o.attachment_pod_uid &&
          cpu_set == o.cpu_set &&
          direct_migration_node_ports == o.direct_migration_node_ports &&
          domain_detected == o.domain_detected &&
          domain_name == o.domain_name &&
          domain_namespace == o.domain_namespace &&
          domain_ready_timestamp == o.domain_ready_timestamp &&
          migration_uid == o.migration_uid &&
          node == o.node &&
          node_address == o.node_address &&
          node_topology == o.node_topology &&
          persistent_state_pvc_name == o.persistent_state_pvc_name &&
          pod == o.pod &&
          selinux_context == o.selinux_context &&
          sync_address == o.sync_address &&
          virtual_machine_instance_uid == o.virtual_machine_instance_uid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [attachment_pod_uid, cpu_set, direct_migration_node_ports, domain_detected, domain_name, domain_namespace, domain_ready_timestamp, migration_uid, node, node_address, node_topology, persistent_state_pvc_name, pod, selinux_context, sync_address, virtual_machine_instance_uid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
