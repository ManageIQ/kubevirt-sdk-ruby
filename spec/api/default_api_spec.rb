=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.15.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Kubevirt::DefaultApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @api_instance = Kubevirt::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@api_instance).to be_instance_of(Kubevirt::DefaultApi)
    end
  end

  # unit tests for create_migration_policy
  # Create a MigrationPolicy object.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1MigrationPolicy]
  describe 'create_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_kube_virt
  # Create a KubeVirt object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1KubeVirt]
  describe 'create_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine
  # Create a VirtualMachine object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachine]
  describe 'create_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_export
  # Create a VirtualMachineExport object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineExport]
  describe 'create_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_instance
  # Create a VirtualMachineInstance object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstance]
  describe 'create_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_instance_migration
  # Create a VirtualMachineInstanceMigration object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceMigration]
  describe 'create_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_instance_preset
  # Create a VirtualMachineInstancePreset object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstancePreset]
  describe 'create_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_instance_replica_set
  # Create a VirtualMachineInstanceReplicaSet object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceReplicaSet]
  describe 'create_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_instancetype
  # Create a VirtualMachineInstancetype object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineInstancetype]
  describe 'create_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_pool
  # Create a VirtualMachinePool object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1VirtualMachinePool]
  describe 'create_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_preference
  # Create a VirtualMachinePreference object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachinePreference]
  describe 'create_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_restore
  # Create a VirtualMachineRestore object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineRestore]
  describe 'create_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_snapshot
  # Create a VirtualMachineSnapshot object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshot]
  describe 'create_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_namespaced_virtual_machine_snapshot_content
  # Create a VirtualMachineSnapshotContent object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshotContent]
  describe 'create_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_virtual_machine_clone
  # Create a VirtualMachineClone object.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClone]
  describe 'create_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_virtual_machine_cluster_instancetype
  # Create a VirtualMachineClusterInstancetype object.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterInstancetype]
  describe 'create_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_virtual_machine_cluster_preference
  # Create a VirtualMachineClusterPreference object.
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterPreference]
  describe 'create_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_migration_policy
  # Delete a collection of MigrationPolicy objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_kube_virt
  # Delete a collection of KubeVirt objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine
  # Delete a collection of VirtualMachine objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_export
  # Delete a collection of VirtualMachineExport objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_instance
  # Delete a collection of VirtualMachineInstance objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_instance_migration
  # Delete a collection of VirtualMachineInstanceMigration objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_instance_preset
  # Delete a collection of VirtualMachineInstancePreset objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_instance_replica_set
  # Delete a collection of VirtualMachineInstanceReplicaSet objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_instancetype
  # Delete a collection of VirtualMachineInstancetype objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_pool
  # Delete a collection of VirtualMachinePool objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_preference
  # Delete a collection of VirtualMachinePreference objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_restore
  # Delete a collection of VirtualMachineRestore objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_snapshot
  # Delete a collection of VirtualMachineSnapshot objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_namespaced_virtual_machine_snapshot_content
  # Delete a collection of VirtualMachineSnapshotContent objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_virtual_machine_clone
  # Delete a collection of VirtualMachineClone objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_virtual_machine_cluster_instancetype
  # Delete a collection of VirtualMachineClusterInstancetype objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_collection_virtual_machine_cluster_preference
  # Delete a collection of VirtualMachineClusterPreference objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_collection_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_migration_policy
  # Delete a MigrationPolicy object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_kube_virt
  # Delete a KubeVirt object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine
  # Delete a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_export
  # Delete a VirtualMachineExport object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_instance
  # Delete a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_instance_migration
  # Delete a VirtualMachineInstanceMigration object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_instance_preset
  # Delete a VirtualMachineInstancePreset object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_instance_replica_set
  # Delete a VirtualMachineInstanceReplicaSet object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_instancetype
  # Delete a VirtualMachineInstancetype object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_pool
  # Delete a VirtualMachinePool object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_preference
  # Delete a VirtualMachinePreference object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_restore
  # Delete a VirtualMachineRestore object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_snapshot
  # Delete a VirtualMachineSnapshot object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_namespaced_virtual_machine_snapshot_content
  # Delete a VirtualMachineSnapshotContent object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_virtual_machine_clone
  # Delete a VirtualMachineClone object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_virtual_machine_cluster_instancetype
  # Delete a VirtualMachineClusterInstancetype object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for delete_virtual_machine_cluster_preference
  # Delete a VirtualMachineClusterPreference object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :grace_period_seconds The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.
  # @option opts [Boolean] :orphan_dependents Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both.
  # @option opts [String] :propagation_policy Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: &#39;Orphan&#39; - orphan the dependents; &#39;Background&#39; - allow the garbage collector to delete the dependents in the background; &#39;Foreground&#39; - a cascading policy that deletes all dependents in the foreground.
  # @return [K8sIoApimachineryPkgApisMetaV1Status]
  describe 'delete_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for func13
  # Health endpoint
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'func13 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for func6
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'func6 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_clone_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_clone_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_export_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_export_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_instancetype_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_instancetype_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_list
  # Get a KubeVirt API GroupList
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroupList]
  describe 'get_api_group_list test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_migrations_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_migrations_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_pool_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_pool_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_group_snapshot_kubevirt_io
  # Get a KubeVirt API group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'get_api_group_snapshot_kubevirt_io test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_clone_kubevirt_io_v1beta1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_clone_kubevirt_io_v1beta1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_export_kubevirt_io_v1beta1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_export_kubevirt_io_v1beta1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_instancetype_kubevirt_io_v1beta1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_instancetype_kubevirt_io_v1beta1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_kubevirt_io_v1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_kubevirt_io_v1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_migrations_kubevirt_io_v1alpha1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_migrations_kubevirt_io_v1alpha1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_pool_kubevirt_io_v1alpha1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_pool_kubevirt_io_v1alpha1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_api_resources_snapshot_kubevirt_io_v1beta1
  # Get KubeVirt API Resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'get_api_resources_snapshot_kubevirt_io_v1beta1 test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_root_paths
  # Get KubeVirt API root paths
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1RootPaths]
  describe 'get_root_paths test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for handle_dump_profiler
  # dump profiler results endpoint
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'handle_dump_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for handle_start_profiler
  # start profiler endpoint
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'handle_start_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for handle_stop_profiler
  # stop profiler endpoint
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'handle_stop_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_kube_virt_for_all_namespaces
  # Get a list of all KubeVirt objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1KubeVirtList]
  describe 'list_kube_virt_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_migration_policy
  # Get a list of MigrationPolicy objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1alpha1MigrationPolicyList]
  describe 'list_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_kube_virt
  # Get a list of KubeVirt objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1KubeVirtList]
  describe 'list_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine
  # Get a list of VirtualMachine objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineList]
  describe 'list_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_export
  # Get a list of VirtualMachineExport objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineExportList]
  describe 'list_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_instance
  # Get a list of VirtualMachineInstance objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceList]
  describe 'list_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_instance_migration
  # Get a list of VirtualMachineInstanceMigration objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceMigrationList]
  describe 'list_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_instance_preset
  # Get a list of VirtualMachineInstancePreset objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstancePresetList]
  describe 'list_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_instance_replica_set
  # Get a list of VirtualMachineInstanceReplicaSet objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceReplicaSetList]
  describe 'list_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_instancetype
  # Get a list of VirtualMachineInstancetype objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineInstancetypeList]
  describe 'list_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_pool
  # Get a list of VirtualMachinePool objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1alpha1VirtualMachinePoolList]
  describe 'list_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_preference
  # Get a list of VirtualMachinePreference objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachinePreferenceList]
  describe 'list_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_restore
  # Get a list of VirtualMachineRestore objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineRestoreList]
  describe 'list_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_snapshot
  # Get a list of VirtualMachineSnapshot objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineSnapshotList]
  describe 'list_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_namespaced_virtual_machine_snapshot_content
  # Get a list of VirtualMachineSnapshotContent objects.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineSnapshotContentList]
  describe 'list_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_clone
  # Get a list of VirtualMachineClone objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineCloneList]
  describe 'list_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_cluster_instancetype
  # Get a list of VirtualMachineClusterInstancetype objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineClusterInstancetypeList]
  describe 'list_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_cluster_preference
  # Get a list of VirtualMachineClusterPreference objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineClusterPreferenceList]
  describe 'list_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_export_for_all_namespaces
  # Get a list of all VirtualMachineExport objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineExportList]
  describe 'list_virtual_machine_export_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_for_all_namespaces
  # Get a list of all VirtualMachine objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineList]
  describe 'list_virtual_machine_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_instance_for_all_namespaces
  # Get a list of all VirtualMachineInstance objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceList]
  describe 'list_virtual_machine_instance_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_instance_migration_for_all_namespaces
  # Get a list of all VirtualMachineInstanceMigration objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceMigrationList]
  describe 'list_virtual_machine_instance_migration_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_instance_preset_for_all_namespaces
  # Get a list of all VirtualMachineInstancePreset objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstancePresetList]
  describe 'list_virtual_machine_instance_preset_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_instance_replica_set_for_all_namespaces
  # Get a list of all VirtualMachineInstanceReplicaSet objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1VirtualMachineInstanceReplicaSetList]
  describe 'list_virtual_machine_instance_replica_set_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_instancetype_for_all_namespaces
  # Get a list of all VirtualMachineInstancetype objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineInstancetypeList]
  describe 'list_virtual_machine_instancetype_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_pool_for_all_namespaces
  # Get a list of all VirtualMachinePool objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1alpha1VirtualMachinePoolList]
  describe 'list_virtual_machine_pool_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_preference_for_all_namespaces
  # Get a list of all VirtualMachinePreference objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachinePreferenceList]
  describe 'list_virtual_machine_preference_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_restore_for_all_namespaces
  # Get a list of all VirtualMachineRestore objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineRestoreList]
  describe 'list_virtual_machine_restore_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_snapshot_content_for_all_namespaces
  # Get a list of all VirtualMachineSnapshotContent objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineSnapshotContentList]
  describe 'list_virtual_machine_snapshot_content_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for list_virtual_machine_snapshot_for_all_namespaces
  # Get a list of all VirtualMachineSnapshot objects.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [V1beta1VirtualMachineSnapshotList]
  describe 'list_virtual_machine_snapshot_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_migration_policy
  # Patch a MigrationPolicy object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1MigrationPolicy]
  describe 'patch_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_kube_virt
  # Patch a KubeVirt object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1KubeVirt]
  describe 'patch_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine
  # Patch a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachine]
  describe 'patch_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_export
  # Patch a VirtualMachineExport object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineExport]
  describe 'patch_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_instance
  # Patch a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstance]
  describe 'patch_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_instance_migration
  # Patch a VirtualMachineInstanceMigration object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceMigration]
  describe 'patch_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_instance_preset
  # Patch a VirtualMachineInstancePreset object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstancePreset]
  describe 'patch_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_instance_replica_set
  # Patch a VirtualMachineInstanceReplicaSet object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceReplicaSet]
  describe 'patch_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_instancetype
  # Patch a VirtualMachineInstancetype object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineInstancetype]
  describe 'patch_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_pool
  # Patch a VirtualMachinePool object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1VirtualMachinePool]
  describe 'patch_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_preference
  # Patch a VirtualMachinePreference object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachinePreference]
  describe 'patch_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_restore
  # Patch a VirtualMachineRestore object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineRestore]
  describe 'patch_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_snapshot
  # Patch a VirtualMachineSnapshot object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshot]
  describe 'patch_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_namespaced_virtual_machine_snapshot_content
  # Patch a VirtualMachineSnapshotContent object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshotContent]
  describe 'patch_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_virtual_machine_clone
  # Patch a VirtualMachineClone object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClone]
  describe 'patch_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_virtual_machine_cluster_instancetype
  # Patch a VirtualMachineClusterInstancetype object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterInstancetype]
  describe 'patch_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for patch_virtual_machine_cluster_preference
  # Patch a VirtualMachineClusterPreference object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterPreference]
  describe 'patch_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_migration_policy
  # Get a MigrationPolicy object.
  # @param name Name of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1alpha1MigrationPolicy]
  describe 'read_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_kube_virt
  # Get a KubeVirt object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1KubeVirt]
  describe 'read_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine
  # Get a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1VirtualMachine]
  describe 'read_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_export
  # Get a VirtualMachineExport object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineExport]
  describe 'read_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_instance
  # Get a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1VirtualMachineInstance]
  describe 'read_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_instance_migration
  # Get a VirtualMachineInstanceMigration object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1VirtualMachineInstanceMigration]
  describe 'read_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_instance_preset
  # Get a VirtualMachineInstancePreset object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1VirtualMachineInstancePreset]
  describe 'read_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_instance_replica_set
  # Get a VirtualMachineInstanceReplicaSet object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1VirtualMachineInstanceReplicaSet]
  describe 'read_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_instancetype
  # Get a VirtualMachineInstancetype object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineInstancetype]
  describe 'read_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_pool
  # Get a VirtualMachinePool object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1alpha1VirtualMachinePool]
  describe 'read_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_preference
  # Get a VirtualMachinePreference object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachinePreference]
  describe 'read_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_restore
  # Get a VirtualMachineRestore object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineRestore]
  describe 'read_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_snapshot
  # Get a VirtualMachineSnapshot object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineSnapshot]
  describe 'read_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_namespaced_virtual_machine_snapshot_content
  # Get a VirtualMachineSnapshotContent object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineSnapshotContent]
  describe 'read_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_virtual_machine_clone
  # Get a VirtualMachineClone object.
  # @param name Name of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineClone]
  describe 'read_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_virtual_machine_cluster_instancetype
  # Get a VirtualMachineClusterInstancetype object.
  # @param name Name of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineClusterInstancetype]
  describe 'read_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for read_virtual_machine_cluster_preference
  # Get a VirtualMachineClusterPreference object.
  # @param name Name of the resource
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :exact Should the export be exact. Exact export maintains cluster-specific fields like &#39;Namespace&#39;.
  # @option opts [Boolean] :export Should this value be exported. Export strips fields that a user can not specify.
  # @return [V1beta1VirtualMachineClusterPreference]
  describe 'read_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_migration_policy
  # Update a MigrationPolicy object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1MigrationPolicy]
  describe 'replace_migration_policy test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_kube_virt
  # Update a KubeVirt object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1KubeVirt]
  describe 'replace_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine
  # Update a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachine]
  describe 'replace_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_export
  # Update a VirtualMachineExport object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineExport]
  describe 'replace_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_instance
  # Update a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstance]
  describe 'replace_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_instance_migration
  # Update a VirtualMachineInstanceMigration object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceMigration]
  describe 'replace_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_instance_preset
  # Update a VirtualMachineInstancePreset object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstancePreset]
  describe 'replace_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_instance_replica_set
  # Update a VirtualMachineInstanceReplicaSet object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceReplicaSet]
  describe 'replace_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_instancetype
  # Update a VirtualMachineInstancetype object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineInstancetype]
  describe 'replace_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_pool
  # Update a VirtualMachinePool object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1alpha1VirtualMachinePool]
  describe 'replace_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_preference
  # Update a VirtualMachinePreference object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachinePreference]
  describe 'replace_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_restore
  # Update a VirtualMachineRestore object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineRestore]
  describe 'replace_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_snapshot
  # Update a VirtualMachineSnapshot object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshot]
  describe 'replace_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_namespaced_virtual_machine_snapshot_content
  # Update a VirtualMachineSnapshotContent object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineSnapshotContent]
  describe 'replace_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_virtual_machine_clone
  # Update a VirtualMachineClone object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClone]
  describe 'replace_virtual_machine_clone test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_virtual_machine_cluster_instancetype
  # Update a VirtualMachineClusterInstancetype object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterInstancetype]
  describe 'replace_virtual_machine_cluster_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for replace_virtual_machine_cluster_preference
  # Update a VirtualMachineClusterPreference object.
  # @param name Name of the resource
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1beta1VirtualMachineClusterPreference]
  describe 'replace_virtual_machine_cluster_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_check_health
  # Health endpoint
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_check_health test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_console
  # Open a websocket connection to a serial console on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_console test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_expand_spec
  # Expands instancetype and preference into the passed VirtualMachine object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_expand_spec test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_filesystemlist
  # Get list of active filesystems on guest machine via guest agent
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceFileSystemList]
  describe 'v1_filesystemlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_freeze
  # Freeze a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_freeze test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_get_sub_api_group
  # Get a KubeVirt API Group
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIGroup]
  describe 'v1_get_sub_api_group test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_guestfs
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_guestfs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_guestosinfo
  # Get guest agent os information
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceGuestAgentInfo]
  describe 'v1_guestosinfo test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_memory_dump
  # Dumps a VirtualMachineInstance memory.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_memory_dump test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_migrate
  # Migrate a running VirtualMachine to another node.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_migrate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_pause
  # Pause a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_pause test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_remove_memory_dump
  # Remove memory dump association.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_remove_memory_dump test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_reset
  # Reset a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_reset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_restart
  # Restart a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [V1RestartOptions] :body 
  # @return [String]
  describe 'v1_restart test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_sev_fetch_cert_chain
  # Fetch SEV certificate chain from the node where Virtual Machine is scheduled
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1SEVPlatformInfo]
  describe 'v1_sev_fetch_cert_chain test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_sev_inject_launch_secret
  # Inject SEV launch secret into a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_sev_inject_launch_secret test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_sev_query_launch_measurement
  # Query SEV launch measurement from a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1SEVMeasurementInfo]
  describe 'v1_sev_query_launch_measurement test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_sev_setup_session
  # Setup SEV session parameters for a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_sev_setup_session test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_soft_reboot
  # Soft reboot a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_soft_reboot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_start
  # Start a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_start test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_stop
  # Stop a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [V1StopOptions] :body 
  # @return [String]
  describe 'v1_stop test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_unfreeze
  # Unfreeze a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_unfreeze test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_unpause
  # Unpause a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1_unpause test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_userlist
  # Get list of active users via guest agent
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceGuestOSUserList]
  describe 'v1_userlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_version
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_vnc
  # Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :preserve_session Connect only if ongoing session is not disturbed.
  # @return [nil]
  describe 'v1_vnc test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_vnc_screenshot
  # Get a PNG VNC screenshot of the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :move_cursor Move the cursor on the VNC display to wake up the screen
  # @return [nil]
  describe 'v1_vnc_screenshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1_vsock
  # Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The port which the VSOCK application listens to.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :tls Weather to request a TLS encrypted session from the VSOCK application.
  # @return [nil]
  describe 'v1_vsock test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_check_health
  # Health endpoint
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_check_health test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_console
  # Open a websocket connection to a serial console on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3_console test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_expand_spec
  # Expands instancetype and preference into the passed VirtualMachine object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_expand_spec test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_filesystemlist
  # Get list of active filesystems on guest machine via guest agent
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceFileSystemList]
  describe 'v1alpha3_filesystemlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_freeze
  # Freeze a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_freeze test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_guestfs
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_guestfs test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_guestosinfo
  # Get guest agent os information
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceGuestAgentInfo]
  describe 'v1alpha3_guestosinfo test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_memory_dump
  # Dumps a VirtualMachineInstance memory.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_memory_dump test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_migrate
  # Migrate a running VirtualMachine to another node.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_migrate test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_pause
  # Pause a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_pause test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_remove_memory_dump
  # Remove memory dump association.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_remove_memory_dump test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_reset
  # Reset a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_reset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_restart
  # Restart a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [V1RestartOptions] :body 
  # @return [String]
  describe 'v1alpha3_restart test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_sev_fetch_cert_chain
  # Fetch SEV certificate chain from the node where Virtual Machine is scheduled
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1SEVPlatformInfo]
  describe 'v1alpha3_sev_fetch_cert_chain test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_sev_inject_launch_secret
  # Inject SEV launch secret into a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_sev_inject_launch_secret test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_sev_query_launch_measurement
  # Query SEV launch measurement from a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1SEVMeasurementInfo]
  describe 'v1alpha3_sev_query_launch_measurement test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_sev_setup_session
  # Setup SEV session parameters for a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_sev_setup_session test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_soft_reboot
  # Soft reboot a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_soft_reboot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_start
  # Start a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_start test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_stop
  # Stop a VirtualMachine object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [V1StopOptions] :body 
  # @return [String]
  describe 'v1alpha3_stop test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_unfreeze
  # Unfreeze a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_unfreeze test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_unpause
  # Unpause a VirtualMachineInstance object.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3_unpause test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_userlist
  # Get list of active users via guest agent
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [V1VirtualMachineInstanceGuestOSUserList]
  describe 'v1alpha3_userlist test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_version
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3_version test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_vnc
  # Open a websocket connection to connect to VNC on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :preserve_session Connect only if ongoing session is not disturbed.
  # @return [nil]
  describe 'v1alpha3_vnc test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_vnc_screenshot
  # Get a PNG VNC screenshot of the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :move_cursor Move the cursor on the VNC display to wake up the screen
  # @return [nil]
  describe 'v1alpha3_vnc_screenshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3_vsock
  # Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port via VSOCK.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The port which the VSOCK application listens to.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :tls Weather to request a TLS encrypted session from the VSOCK application.
  # @return [nil]
  describe 'v1alpha3_vsock test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3dump_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3dump_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3get_api_sub_resources
  # Get a KubeVirt API resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'v1alpha3get_api_sub_resources test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3start_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3start_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3stop_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3stop_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3usbredir
  # Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3usbredir test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_addvolume
  # Add a volume and disk to a running Virtual Machine.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3vm_addvolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_expand_spec
  # Get VirtualMachine object with expanded instancetype and preference.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3vm_expand_spec test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_objectgraph
  # Get graph of objects related to a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1ObjectGraphNode]
  describe 'v1alpha3vm_objectgraph test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_port_forward
  # Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3vm_port_forward test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_port_forward_with_protocol
  # Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param protocol The protocol for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3vm_port_forward_with_protocol test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vm_removevolume
  # Removes a volume and disk from a running Virtual Machine.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3vm_removevolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vmi_addvolume
  # Add a volume and disk to a running Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3vmi_addvolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vmi_objectgraph
  # Get graph of objects related to a Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1ObjectGraphNode]
  describe 'v1alpha3vmi_objectgraph test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vmi_port_forward
  # Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3vmi_port_forward test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vmi_port_forward_with_protocol
  # Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param protocol The protocol for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1alpha3vmi_port_forward_with_protocol test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1alpha3vmi_removevolume
  # Removes a volume and disk from a running Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1alpha3vmi_removevolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1dump_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1dump_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1get_api_sub_resources
  # Get a KubeVirt API resources
  # @param [Hash] opts the optional parameters
  # @return [K8sIoApimachineryPkgApisMetaV1APIResourceList]
  describe 'v1get_api_sub_resources test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1start_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1start_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1stop_cluster_profiler
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1stop_cluster_profiler test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1usbredir
  # Open a websocket connection to connect to USB device on the specified VirtualMachineInstance.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1usbredir test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_addvolume
  # Add a volume and disk to a running Virtual Machine.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1vm_addvolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_expand_spec
  # Get VirtualMachine object with expanded instancetype and preference.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1vm_expand_spec test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_objectgraph
  # Get graph of objects related to a Virtual Machine
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1ObjectGraphNode]
  describe 'v1vm_objectgraph test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_port_forward
  # Open a websocket connection forwarding traffic to the running VMI for the specified VirtualMachine and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1vm_port_forward test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_port_forward_with_protocol
  # Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachine and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param protocol The protocol for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1vm_port_forward_with_protocol test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vm_removevolume
  # Removes a volume and disk from a running Virtual Machine.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1vm_removevolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vmi_addvolume
  # Add a volume and disk to a running Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1vmi_addvolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vmi_objectgraph
  # Get graph of objects related to a Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [V1ObjectGraphNode]
  describe 'v1vmi_objectgraph test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vmi_port_forward
  # Open a websocket connection forwarding traffic to the specified VirtualMachineInstance and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1vmi_port_forward test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vmi_port_forward_with_protocol
  # Open a websocket connection forwarding traffic of the specified protocol (either tcp or udp) to the specified VirtualMachineInstance and port.
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param port The target port for portforward on the VirtualMachineInstance.
  # @param protocol The protocol for portforward on the VirtualMachineInstance.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1vmi_port_forward_with_protocol test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for v1vmi_removevolume
  # Removes a volume and disk from a running Virtual Machine Instance
  # @param name Name of the resource
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param body 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'v1vmi_removevolume test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_kube_virt_list_for_all_namespaces
  # Watch a KubeVirtList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_kube_virt_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_migration_policy_list_for_all_namespaces
  # Watch a MigrationPolicyList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_migration_policy_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_kube_virt
  # Watch a KubeVirt object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_kube_virt test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine
  # Watch a VirtualMachine object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_export
  # Watch a VirtualMachineExport object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_export test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_instance
  # Watch a VirtualMachineInstance object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_instance test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_instance_migration
  # Watch a VirtualMachineInstanceMigration object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_instance_migration test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_instance_preset
  # Watch a VirtualMachineInstancePreset object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_instance_preset test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_instance_replica_set
  # Watch a VirtualMachineInstanceReplicaSet object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_instance_replica_set test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_instancetype
  # Watch a VirtualMachineInstancetype object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_instancetype test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_pool
  # Watch a VirtualMachinePool object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_pool test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_preference
  # Watch a VirtualMachinePreference object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_preference test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_restore
  # Watch a VirtualMachineRestore object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_restore test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_snapshot
  # Watch a VirtualMachineSnapshot object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_snapshot test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_namespaced_virtual_machine_snapshot_content
  # Watch a VirtualMachineSnapshotContent object.
  # @param namespace Object name and auth scope, such as for teams and projects
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_namespaced_virtual_machine_snapshot_content test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_clone_list_for_all_namespaces
  # Watch a VirtualMachineCloneList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_clone_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_cluster_instancetype_list_for_all_namespaces
  # Watch a VirtualMachineClusterInstancetypeList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_cluster_instancetype_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_cluster_preference_list_for_all_namespaces
  # Watch a VirtualMachineClusterPreferenceList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_cluster_preference_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_export_list_for_all_namespaces
  # Watch a VirtualMachineExportList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_export_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_instance_list_for_all_namespaces
  # Watch a VirtualMachineInstanceList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_instance_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_instance_migration_list_for_all_namespaces
  # Watch a VirtualMachineInstanceMigrationList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_instance_migration_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_instance_preset_list_for_all_namespaces
  # Watch a VirtualMachineInstancePresetList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_instance_preset_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_instance_replica_set_list_for_all_namespaces
  # Watch a VirtualMachineInstanceReplicaSetList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_instance_replica_set_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_instancetype_list_for_all_namespaces
  # Watch a VirtualMachineInstancetypeList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_instancetype_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_list_for_all_namespaces
  # Watch a VirtualMachineList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_pool_list_for_all_namespaces
  # Watch a VirtualMachinePoolList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_pool_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_preference_list_for_all_namespaces
  # Watch a VirtualMachinePreferenceList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_preference_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_restore_list_for_all_namespaces
  # Watch a VirtualMachineRestoreList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_restore_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_snapshot_content_list_for_all_namespaces
  # Watch a VirtualMachineSnapshotContentList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_snapshot_content_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for watch_virtual_machine_snapshot_list_for_all_namespaces
  # Watch a VirtualMachineSnapshotList object.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :continue The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server the server will respond with a 410 ResourceExpired error indicating the client must restart their list without the continue field. This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.
  # @option opts [String] :field_selector A selector to restrict the list of returned objects by their fields. Defaults to everything.
  # @option opts [Boolean] :include_uninitialized If true, partially initialized resources are included in the response.
  # @option opts [String] :label_selector A selector to restrict the list of returned objects by their labels. Defaults to everything
  # @option opts [Integer] :limit limit is a maximum number of responses to return for a list call. If more items exist, the server will set the &#x60;continue&#x60; field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.
  # @option opts [String] :resource_version When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history.
  # @option opts [Integer] :timeout_seconds TimeoutSeconds for the list/watch call.
  # @option opts [Boolean] :watch Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.
  # @return [K8sIoApimachineryPkgApisMetaV1WatchEvent]
  describe 'watch_virtual_machine_snapshot_list_for_all_namespaces test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
